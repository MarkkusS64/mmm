{
	"info": {
		"_postman_id": "c65c0d7d-4ac5-4854-acef-d25a9ff81155",
		"name": "Collection_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1st",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var TokenLogin = pm.response.json(); \r",
							"pm.environment.set(\"token\", TokenLogin.token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Max",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123654",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2nd",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);});\r",
							"pm.test(\"Json-schema is ok\", function() {const schema = {\r",
							"     \"type\": \"object\",\r",
							"     \"properties\": {\r",
							"     \"person\": {\r",
							"       \"type\": \"object\",\r",
							"       \"properties\": {\r",
							"         \"u_age\": {\r",
							"           \"type\": \"integer\"\r",
							"         },\r",
							"         \"u_name\": {\r",
							"           \"type\": \"array\",\r",
							"           \"items\": [\r",
							"             {\r",
							"               \"type\": \"string\"\r",
							"             },\r",
							"             {\r",
							"               \"type\": \"integer\"\r",
							"             },\r",
							"             {\r",
							"               \"type\": \"integer\"\r",
							"             }\r",
							"           ]\r",
							"         },\r",
							"         \"u_salary_1_5_year\": {\r",
							"           \"type\": \"integer\"\r",
							"         }\r",
							"       },\r",
							"       \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"    }\r",
							"pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"\r",
							"let parse = JSON.parse(request.data);\r",
							"let salar = parse.salary;\r",
							"let sal_1_5y = pm.response.json().person.u_salary_1_5_year;\r",
							"let sal_12m = pm.response.json().qa_salary_after_12_months;\r",
							"let sal_6m = pm.response.json().qa_salary_after_6_months;\r",
							"\r",
							"\r",
							"pm.test(\"salary in response is equal to salary in request\", function () {\r",
							"\r",
							"pm.expect(salar).to.eql(10000);\r",
							"} );\r",
							"pm.test(\"u_salary_1_5_year = start_qa_salary*4\", function () {\r",
							"\r",
							"pm.expect(salar*4).to.eql(sal_1_5y);\r",
							"} );\r",
							"pm.test(\"qa_salary_after_12_months = start_qa_salary*2.9\", function () {\r",
							"\r",
							"pm.expect(salar*2.9).to.eql(sal_12m);\r",
							"} );\r",
							"pm.test(\"qa_salary_after_6_months = start_qa_salary*2\", function () {\r",
							"\r",
							"pm.expect(salar*2).to.eql(sal_6m);\r",
							"} )\r",
							"pm.environment.set(\"u_salary_1_5_year\", sal_1_5y);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{   \"age\": 23,\r\n    \"salary\": 10000,\r\n    \"name\": \"Max\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3rd",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200, response is json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Json-schema is ok\", function () { const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"integer\" },\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"salary\": {\"type\": \"array\",\r",
							"            \"items\": [\r",
							"                {\"type\": 'integer'},\r",
							"                {\"type\": \"string\"},\r",
							"                {\"type\": \"string\"}\r",
							"            ]}\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ]\r",
							"} \r",
							"pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"let json = request.data.salary;\r",
							"let salary = pm.response.json().salary[0];\r",
							"let salx2 = pm.response.json().salary[1];\r",
							"let salx3 = pm.response.json().salary[2];\r",
							"const parsed_json = parseInt(json);\r",
							"const parsed_salx2 = parseInt(salx2);\r",
							"const parsed_salx3 = parseInt(salx3);\r",
							"\r",
							"pm.test(\"response salary is eql to request salary\", function () {\r",
							"     pm.expect(salary).to.eql(parsed_json);\r",
							"});\r",
							"pm.test(\"salaryx2 is eql to 20000\", function () {\r",
							"     pm.expect(salx2).to.eql(\"20000\");\r",
							"});\r",
							"pm.test(\"salaryx3 is eql to 30000\", function () {\r",
							"     pm.expect(salx3).to.eql(\"30000\");\r",
							"});\r",
							"pm.test(\"salary<salayx2\", function () {\r",
							"     pm.expect(parsed_json).to.lessThan(parsed_salx2);\r",
							"});\r",
							"pm.test(\"salary<salayx3\", function () {\r",
							"     pm.expect(parsed_json).to.lessThan(parsed_salx3);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "10000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Max",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4th",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200, response is json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Json-schema is ok\", function () { const schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"});\r",
							"\r",
							"\r",
							"let aaa = JSON.parse(request.data.weight);\r",
							"let df = pm.response.json().daily_food;\r",
							"let ds = pm.response.json().daily_sleep;\r",
							"\r",
							"pm.test(\"daily_food is equal to weight*0,012\", function () {\r",
							"    pm.expect(df).to.eql(aaa*0.012);\r",
							"} );\r",
							"pm.test(\"daily_food is equal to weight*2.5\", function () {\r",
							"    pm.expect(ds).to.eql(aaa*2.5);\r",
							"} );"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Max",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "68",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5th",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200, response is json\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Json-schema is ok\", function () { const schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"});\r",
							"\r",
							"\r",
							"let nme = pm.environment.get(\"Name\");\r",
							"let nm = pm.response.json().name;\r",
							"\r",
							"pm.test(\"name from resp is eql to name from env\", function () {\r",
							"    pm.expect(nme).to.eql(nm); \r",
							"});\r",
							"\r",
							"let ag = request.data.age;\r",
							"let agg = pm.response.json().age;\r",
							"pm.test(\"age from req is eql to age from resp\", function () {\r",
							"    pm.expect(ag).to.eql(agg);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{Name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6th",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"let length = (obj) => {\r",
							"    return Object.keys(obj).length\r",
							"};\r",
							"let rand = Math.floor(Math.random() * length(res));\r",
							"let rand_ID = res[rand]\r",
							"pm.environment.set(\"cur_id\", rand_ID.Cur_ID);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7th",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Json-schema is ok\", function() {const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{cur_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					],
					"query": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"disabled": true
						},
						{
							"key": "curr_code",
							"value": "813",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}